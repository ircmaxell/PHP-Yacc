#!/usr/bin/env php
<?php
namespace PhpYacc;

use PhpYacc\Grammar\Context;

foreach (array(__DIR__ . '/../../../autoload.php', __DIR__ . '/../../vendor/autoload.php', __DIR__ . '/../vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        define('COMPOSER_INSTALL', $file);

        break;
    }
}

unset($file);

if (!defined('COMPOSER_INSTALL')) {
    fwrite(
        STDERR,
        'You need to set up the project dependencies using Composer:' . PHP_EOL . PHP_EOL .
        '    composer install' . PHP_EOL . PHP_EOL .
        'You can learn all about Composer on https://getcomposer.org/.' . PHP_EOL
    );

    die(1);
}

require COMPOSER_INSTALL;

$grammarFile = end($argv);
$isUsingStdin = ($grammarFile === '-');

if ($isUsingStdin) {
    $grammarFile = 'php://stdin';
    $resultFile = 'php://stdout';
} else {
    $resultFile = substr($grammarFile, 0, -1);
}

if ($argc < 2 || (!$isUsingStdin && !file_exists($grammarFile))) {
    help();
    exit(4);
}

$errorFile = fopen('php://stderr', 'w');
$context = new Context($grammarFile, $errorFile);

$skeleton = '';

for ($i = 1; $i < $argc - 1; $i++) {
    switch ($argv[$i]) {
        case '-p':
            if ($i === $argc - 2) {
                error("Class name required for option -p");
            }
            $context->pspref = $argv[++$i];
            break;
        case '-x':
            $context->verboseDebug = true;
        case '-v':
            $context->debugFile = fopen(getcwd() . "/y.output", 'w' );
            break;
        case '-t':
            $context->tflag = true;
            break;
        case '-a':
            $context->aflag = true;
            break;
        case '-n':
            $context->allowSemanticValueReferenceByName = true;
            break;
        case '-m':
            if ($i === $argc - 2) {
                error("Skeleton file required for option -m");
            }
            $skeleton = file_get_contents($argv[++$i]);
            break;
        default:
            error("Unexpected argument/flag {$argv[$i]}");

    }
}

(new Generator)->generate($context, file_get_contents($grammarFile), $skeleton, $resultFile);


function help()
{
    echo <<<EOH
PHP-Yacc by Anthony Ferrara, Nikita Popov, and others

Usage: phpyacc [options] grammar.y

Options:
  -p <name>     The name of the class to generate
  -x            Enable extended debug mode
  -v            Generate y.output file
  -t            Set the T flag for templates (inclusion of debug information)
  -a            Set the A flag for templates (unused)
  -m <skeleton> Path to the skeleton file to use


EOH;
}

function error(string $message)
{
    echo $message . "\n";
    help();
    exit(2);
}
